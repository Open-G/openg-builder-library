* Need to filter the Class Private Data from the linker info (or perhaps fix the path so that it is beneath the lvclass file?)  Need to figure out why it its path is not beneath the lvclass -- probably this is in the path resolver and should also be fixed.  We still might have some trouble with Write Linker Info (in 8.2.1), since read linker info had some troubles.

* It might be a good idea to change the Write Linker function to iterate over the input paths in a For Loop -- does this cause any issues (I don't think so)?  This would allow progress to be displayed.  Maybe this could be selected with an INI key?

* Builder is having trouble finding lvlib (and possibly members) when it's not explicitly included in the build.  This doesn't seem to be happening when lvclass files are not explicitely included -- why lvlib?.

* Should I really be removing the Class Private Data members from the Library Members inside "Get Parent Libraries and Members.vi" -- I would think that we should output these but simply treat them appropriately, later.

* Need to commit local modifications in my (JK) sandbox or determine the changes (lvdiff)

* Should put a dialog instructing user to restart LabVIEW after mass compiling builder (otherwise LabVIEW will crash builder tries to build -- make note of annoying TrimWhitespace changed messages).

* Double-click of VI in main UI should open in the user's application context (Menu-Launch App Instance).

* Need to devise a way to find Static VI Reference VIs.  How about using App.All VIs in LabVIEW 8.x, since we are working in a segregated application instance?

* Apply passwords to lvlibs

----NameSpace mangling for lvlibs----(TP)

*NameSpace Mangling of lvlibs --->OpenG\trunk\builder\source\Support\Generate Resources Copy Info.vi

*Change the name of the VI in memory to compensate for lvlib renaming. --->OpenG\trunk\builder\source\Support\Save VIs to destination.vi
why refere by name and not by ref?

----Nested lvlibs:
	possible pitfalls/bugs:
	No nested lvlibs?

	The library/vi name seperator does not compare for this.

	OpenG\trunk\builder\source\Support\Parse Library Member Name.vi

	something like mySerial.lvlib:myGPS.lvlib:init.vi

	will return init.vi as vi name (OK)
	and mySerial.lvlib:myGPS.lvlib as Library name (probably not OK)

* [JK] Need to generate an error when a name collision occurs -- need to test that no two VI's name/location on disk will collide.

* [JK] Need an option to automatically name mangle VIs (e.g., prefix with lvlib name) if a name collision would occur.